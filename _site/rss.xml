<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Anton Davydov personal blog</title>
    <link>http://davydovanton.github.io</link>
    <description>Блог о Ruby и прочих технологиях</description>
    <pubDate>Mon, 30 Mar 2015 00:00:00 +0300</pubDate>
    <item>
      <title>Рендеринг блока в erb</title>
      <link>http://davydovanton.github.io/posts/render-block-in-erb</link>
      <description><![CDATA[Если вы создали методы которые возвращатю содержимое блока и вызываете их в erb (slim, haml, etc) у вас могут возникнуть проблемы. Например - репитинг контента или еще что хуже. 
Пускай наши методы выглядят так:

]]></description>
      <pubDate>Mon, 30 Mar 2015 00:00:00 +0300</pubDate>
      <guid>http://davydovanton.github.io/posts/render-block-in-erb</guid>
      <content:encoded><![CDATA[<p>Если вы создали методы которые возвращатю содержимое блока и вызываете их в erb (slim, haml, etc) у вас могут возникнуть проблемы. Например - репитинг контента или еще что хуже. 
Пускай наши методы выглядят так:</p>

<p>``` ruby
def add_to_head(&amp;block)
  @head_html ||= []
  @head_html « block if block_given?
end</p>

<p>def display_custom_head
  return unless @head_html
  @head_html.map(&amp;:call).join
end
```</p>

<p>Вы можете использовать метод <code>captire</code> который включен в <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/CaptureHelper.html#method-i-capture">rails</a> и <a href="https://github.com/sinatra/sinatra-contrib#common-extensions">sinatra-contrib</a> библиотеки. Но что делать, если у вас нет возможности использовать эти методы или они имеют слишком большой оверхед для конкретной задачи?
Как раз такой случай возник у меня в pull request-е в sidekiq, где я написал простой вариант метода <code>capture</code> для erb файлов:</p>

<p><code>ruby
def capture(&amp;block)
  block.call
  eval('', block.binding)
end
</code></p>

<p>Надеюсь это будет вам полезно.
Happy hacking!</p>
]]></content:encoded>
      <dc:date>2015-03-30T00:00:00+03:00</dc:date>
    </item>
    <item>
      <title>Создание color hash-а для любой строки</title>
      <link>http://davydovanton.github.io/posts/specific-color-hash</link>
      <description><![CDATA[Так случатся, что иногда нужно из строки сделать color hash. Как мне кажется, самый простой способ - использовать Digest::MD5. Ддя этого достаточно вызывать метод hexdigest и передать в него нужную строку:

]]></description>
      <pubDate>Sun, 29 Mar 2015 00:00:00 +0300</pubDate>
      <guid>http://davydovanton.github.io/posts/specific-color-hash</guid>
      <content:encoded><![CDATA[<p>Так случатся, что иногда нужно из строки сделать color hash. Как мне кажется, самый простой способ - использовать <code>Digest::MD5</code>. Ддя этого достаточно вызывать метод <code>hexdigest</code> и передать в него нужную строку:</p>

<p><code>ruby
Digest::MD5.hexdigest('My string')[0..5] # =&gt; 'a537d0'
</code></p>

<p>Ну а если вы хотите сделать rgb, то достаточно каждые 2 симвора из color hash переобразовать в 10 ричную сисему с помощью <code>to_i(16)</code>:</p>

<p><code>ruby
Digest::MD5.hexdigest(worker)[0..5]
  .scan(/../)
  .map{ |color| color.to_i(16) }
</code></p>
]]></content:encoded>
      <dc:date>2015-03-29T00:00:00+03:00</dc:date>
    </item>
    <item>
      <title>История vim</title>
      <link>http://davydovanton.github.io/posts/vim-history</link>
      <description><![CDATA[Я свято верю, что перед тем, как изучать новую технологию, необходимо узнать, зачем и в каких условиях она была создана. Думаю, данные знания позволяют в будущем не только не забивать гвозди микроскопом, но и не спрашивать, почему они так плохо забиваются. Поэтому первую запись из цикла статей, связанных с vim-ом, я бы хотел начать с истории его становления и небольшого описания его функционала.

]]></description>
      <pubDate>Sun, 16 Mar 2014 00:00:00 +0400</pubDate>
      <guid>http://davydovanton.github.io/posts/vim-history</guid>
      <content:encoded><![CDATA[<p>Я свято верю, что перед тем, как изучать новую технологию, необходимо узнать, зачем и в каких условиях она была создана. Думаю, данные знания позволяют в будущем не только не забивать гвозди микроскопом, но и не спрашивать, почему они так плохо забиваются. Поэтому первую запись из цикла статей, связанных с vim-ом, я бы хотел начать с истории его становления и небольшого описания его функционала.</p>

<!--more-->

<p>Представьте себе: 70тые годы, расцвет unix машин, на данный момент существует только текстовый редактор <a href="http://en.wikipedia.org/wiki/Ed_(text_editor)">ed</a>, который является командно-ориентированным, а за ним появляется редактор <a href="http://en.wikipedia.org/wiki/Ex_(text_editor)">ex</a>. Во времена первого никто не слышал о мониторах, поэтому использовали для ввода телетайпы, из-за чего ed имеет командно-ориентированный интерфейс. А ex, в свою очередь, являлся улучшеным ed. Поэтому в нем появились такие штуки как экранное редактирование и работа с несколькими файлами, что для тех времен является прорывом. В это время многие программисты начинают писать свои редакторы, и один из них, <a href="http://en.wikipedia.org/wiki/Bill_Joy">Билл Джой</a>, придумывает логичную и простую концепцию поверх редактора ex. Во первых, было бы логично воспринимать текст как объект, к которому применяются команды редактирования. Во вторых, использование unix идеологии о простоте и взаимности комманд. Так, в 1976 году, появляется первая версия текстового редактора vi, сокращено от (visual). Давайте рассмотрим каждую из концепций отдельно.</p>

<p>Во первых, человек часто мыслит абстрактно, поэтому мы никогда не воспринимает набор последовательных символов как непосредственно набор последовательных символов. Наш разум создает абстракции, такие как слова, предложения, параграфы или абзацы и тому подобные. Так почему бы нам не реализовать эту же идею в текстовом редакторе? Думаю, этим же вопросом задался Билл Джой, и поэтому vi оперирует не просто с набором символов, как многие другие текстовые редакторы, а оперирует непосредственно объектами-абстракциями: словами, строками, параграфами.</p>

<p>Допустим, мы смогли реализовать такую идею внутри редактора, но теперь встает вопрос, что делать с этими объектами? Да собственно то же самое, что мы, доблестные воины клавиатуры и текста, делаем с ними каждый день - изменять их посредством передачи в функций. Кстати, часть функций можно позаимствовать из unix-а, например, sort и ему подобные. Поэтому на данный момент наше взаимодействие с редактором можно описать простым набором функций вида: [комманда] [объект].</p>

<p>А теперь самое интересное, как мы реализуем такое количество комманд и способов выбора объектов, и при этом нам надо как то печатать обычный текст. Думаю, многие понимают, что использовать все клавиши для комманд и для набора текста - не реально вообще никак. А тем более на такой клавиатуре, которую использовали в терминалах того времени.</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/KB_Terminal_ADM3A.svg/1000px-KB_Terminal_ADM3A.svg.png" alt="old unix keybord" /></p>

<p>Кстати, небольшой оффтоп, вы никогда не задумывались, откуда пошло, что символ ‘~’ в nix like системах обозначает home дирикторию? Посмотрите внимательно на клавиатуру выше, а именно на клавишу home ;)</p>

<p>Так вот, тут-то мы и приходим к модальному интерфейсу. Что же это значит? Это значит, что существует несколько режимов, в которых различные клавиши выполняют различные комманды. В vi было целых 2 режима: режим вставки, в котором пользователь мог набирать текст, и коммандный режим, в котором пользователь, посредством нажатия комбинаций клавиш, работает с текстом.</p>

<p>Вся прелесть данного текстового редактора была не только в его инновациях, но и в его открытости, что позволило в 1991 году <a href="http://en.wikipedia.org/wiki/Bram_Moolenaar">Браму Мооленару</a> создать первую версию vim, которая расшифровывается как <strong>V</strong>i <strong>im</strong>proved. В нем было очень много нового, например, визуальный режим, макросы, работа с кучей файлов одновременно, итеграция с ОС и так далее.</p>

<p>Так что же это все дает нам, обычным программистам? Во первых, мы можем приобщиться к истории, а если серьезно - ввиду того, что раньше не было мыши, то все комманды печатались на клавиатуре, и никакие Васи не тыкали мышкой в кнопочки на экране. Ну а так как тыкаться мышкой в интерфейсе дольше, чем использовать хоткеи, то мы получаем довольно сильный профит в скорости. Во вторых, интерфейс не перегружен излишней функциональностью, как во многих IDE или текстовых редакторах. Предлагаю вам сравнить скриншоты vim-а и какого-нибудь eclipse.</p>

<p><a class="lightbox" href="http://2.bp.blogspot.com/_ZzOZmj1dP0c/TNcTx8DygaI/AAAAAAAAA0Q/Ar2BsQs11VI/s1600/gvim.png">
<img src="http://2.bp.blogspot.com/_ZzOZmj1dP0c/TNcTx8DygaI/AAAAAAAAA0Q/Ar2BsQs11VI/s1600/gvim.png" alt="Vim" />
</a>
<a class="lightbox" href="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Eclipse_4.3.Kepler_screenshot.png/800px-Eclipse_4.3.Kepler_screenshot.png">
<img src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Eclipse_4.3.Kepler_screenshot.png/800px-Eclipse_4.3.Kepler_screenshot.png" alt="Eclipse" />
</a></p>

<p>Сказать по правде, я давно хотел спросить, вы часто тыкаете во все эти кнопки в cтроке наверху?</p>

<p>В третьих, вы получаете необычный, и оттого интересный, удобный, после привыкания, способ взаимодействия с текстом. Подумайте сами, вы взаимодействуете с текстом как с объектом, а не как с набором символов, что позволяет вам выбирать не просто последовательность символов, а целые слова, параграфы, линии, блоки текста и оперировать с ними как захотите.</p>

<p>Но для начала стоит вернуться к режимам. В vim-е их 4: нормальный, в котором вы посредством хоткеев выполняете операции над текстом; коммандный, в котором вы можете вводить комманды как в консоли(и, кстати, выполнять консольные комманды тоже); режим вставки, в котором вы можете набирать текст и оперировать им, как в обычном текстовом редакторе, а-ля sublime; ну и последний, визуальный, в котором вы можете выбирать текст для дальнейшего взаимодействия с ним. Стоит отметить, что визуальных режимов 3 - обычный, в котором вы выбираете текст посимвольно, строчный, в котором вы вы выбираете текст построчно, и блочный, в этом режиме вы задаете 2 точки прямоугольника, весь текст в котором выделяется и пригоден для взаимодействия. ( Сказать по правде, есть еще один режим, режим эмуляции ex редактора. Вызывается он с помощью <code>Q</code>, обязательно с шифтом, после чего вы попадаете в отдельное окно, в котором вы можете вводить комманды без префикса <code>:</code>. Чтобы выйти из этого режима достаточно набрать <code>visual</code> или <code>vi</code>. Для справки советую набрать <code>:h Ex-mode</code> в vim. )</p>

<p>Исходя из всего, что я написал выше - вам придется полностью изменить свое отношение к взаимодействию с текстом, что, в свою очередь, позволит вам увеличить вашу скорость редактирования/поиска текста. Скажу сразу, это непривычно, но с другой стороны, это как изучение нового языка программирования. Вы можете оставаться в собственной зоне комфорта, а можете сломать свой мозг, изучив какой-нибудь lisp или haskell. Тут то же самое, вы можете всю жизнь использовать привычный sublime, а можете попробовать что-то новое. Ну а в следующей записи мы более детально обсудим редактор и рассмотрим, как же он может облегчить нам жизнь.</p>
]]></content:encoded>
      <dc:date>2014-03-16T00:00:00+04:00</dc:date>
    </item>
    <item>
      <title>Seed файл и вы</title>
      <link>http://davydovanton.github.io/posts/seed-and-you</link>
      <description><![CDATA[Совсем недавно, на работе, потребовалось мне заполнить новый проект данными для дальнейшего тестирования и разработки. Конечно же, данные должны быть в любом виде, и первое, о чем я подумал, был seed файл, поэтому сегодня мы поговорим именно о нем. Как всем известно, данный файл служит для генерации данных в рельсовых приложениях. Вы пишите скрипт, выполняете rake db:seed и радуетесь жизни. В моем случае данные были типовыми, а именно, нужно было сгенерировать пользователей, посты и комментарии к этим постам. Я думаю все прекрасно понимают, как все взаимосвязанно, поэтому на этом останавливаться не вижу особого смысла.

]]></description>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0400</pubDate>
      <guid>http://davydovanton.github.io/posts/seed-and-you</guid>
      <content:encoded><![CDATA[<p>Совсем недавно, на работе, потребовалось мне заполнить новый проект данными для дальнейшего тестирования и разработки. Конечно же, данные должны быть в любом виде, и первое, о чем я подумал, был seed файл, поэтому сегодня мы поговорим именно о нем. Как всем известно, данный файл служит для генерации данных в рельсовых приложениях. Вы пишите скрипт, выполняете <code>rake db:seed</code> и радуетесь жизни. В моем случае данные были типовыми, а именно, нужно было сгенерировать пользователей, посты и комментарии к этим постам. Я думаю все прекрасно понимают, как все взаимосвязанно, поэтому на этом останавливаться не вижу особого смысла.</p>

<!--more-->

<p>Обычная практика многих людей - задать одинаковые данные для всех типов данных и наплодить их с десяток. Смотрится это обычно как-то так:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">user</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nb">name</span><span class="p">:</span>  <span class="s1">&#39;Jon&#39;</span>
  <span class="ss">email</span><span class="p">:</span> <span class="s1">&#39;my@email.org&#39;</span>
  <span class="ss">password</span><span class="p">:</span> <span class="s1">&#39;12345678&#39;</span><span class="p">,</span>
  <span class="ss">password_confirmation</span><span class="p">:</span> <span class="s1">&#39;12345678&#39;</span>  
  <span class="p">}</span>

<span class="n">post</span> <span class="o">=</span> <span class="p">{</span>
  <span class="ss">title</span><span class="p">:</span>  <span class="s1">&#39;My Post&#39;</span>
  <span class="ss">body</span><span class="p">:</span>   <span class="s1">&#39;My body&#39;</span>
  <span class="p">}</span>

<span class="n">comment</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">body</span><span class="p">:</span> <span class="s1">&#39;comment&#39;</span> <span class="p">}</span>

<span class="mi">10</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
  <span class="n">my_user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
  <span class="n">my_post</span> <span class="o">=</span> <span class="n">my_user</span><span class="o">.</span><span class="n">create_post</span><span class="p">(</span><span class="n">post</span><span class="p">)</span>
  <span class="n">my_post</span><span class="o">.</span><span class="n">create_comment</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">comment</span><span class="p">)</span>
<span class="k">end</span></code></pre></div>

<p>Но согласитесь, это скучно, банально и задевает чувство прекрасного. Поэтому давайте плюнем на все и развлечемся, создав свой собственный, изменяющийся из раза в раз мир :)</p>

<p><em><strong>ATTENTION</strong>: далее будет много рандома, благодаря которому поддерживать все это или искать ошибки становится все сложнее и сложнее. Поэтому, использование генераторов, основанных на рандоме не рекомендуется для продакшена. В крайнем, случае использовать аккуратно и с умом.</em></p>

<p>Для того, чтобы наш воображаемый мир существовал, нам, естественно, нужны пользователи. И наша цель - создать абсолютно разных пользователей, не похожих друг на друга. Конечно же, первое, что всплывает в голову - замечательный гем <a href="https://github.com/stympy/faker">faker</a>, который поможет нам генерировать произвольные имена и почтовые адресса для наших пользователей. Но при всем при этом, не будем забывать про нашего админа. Так же, давайте зададим рандомное количество записей в интервале от 18 до 25 штук (числа, как вы догадались, могут быть абсолютно любые):</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">user</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nb">name</span><span class="p">:</span>  <span class="n">admin</span>
  <span class="ss">email</span><span class="p">:</span> <span class="n">admin</span><span class="vi">@my_app</span><span class="o">.</span><span class="n">com</span>
  <span class="ss">password</span><span class="p">:</span> <span class="s1">&#39;12345678&#39;</span><span class="p">,</span>
  <span class="ss">password_confirmation</span><span class="p">:</span> <span class="s1">&#39;12345678&#39;</span>  
  <span class="p">}</span>

<span class="n">rnd</span> <span class="o">=</span> <span class="no">Random</span><span class="o">.</span><span class="n">new</span>
<span class="n">user_count</span> <span class="o">=</span> <span class="n">rnd</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">18</span><span class="o">.</span><span class="n">.</span><span class="mi">23</span><span class="p">)</span>
<span class="no">User</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>

<span class="n">user_count</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
  <span class="n">user</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span>  <span class="o">=</span> <span class="no">Faker</span><span class="o">::</span><span class="no">Name</span><span class="o">.</span><span class="n">name</span>
  <span class="n">user</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span> <span class="o">=</span> <span class="no">Faker</span><span class="o">::</span><span class="no">Internet</span><span class="o">.</span><span class="n">email</span>  
  <span class="no">User</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
<span class="k">end</span></code></pre></div>

<p>Cобственно я уверен, faker поможет вам сгенерировать почти любую информацию, стоит только открыть доки. Ну а если вам не угодил этот гем, то существует достаточно <a href="https://www.ruby-toolbox.com/categories/random_data_generation">много</a> других data генераторов.</p>

<p>Не думаю, что тут что-то было сложно, поэтому пререйдем к постам. Сказать по правде, в нашем проекте посты состояли из строго заданных кусков html-a, поэтому тут ничего не оставалось, кроме как делать в лоб. Единственный момент, мы будем выбирать произвольно пользователя, чтобы от его имени создавать наш пост:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">posts</span> <span class="o">=</span> <span class="o">[</span>
  <span class="p">{</span>
    <span class="ss">title</span><span class="p">:</span>  <span class="s1">&#39;My first Post&#39;</span>
    <span class="ss">body</span><span class="p">:</span>   <span class="s1">&#39;My body&#39;</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="ss">title</span><span class="p">:</span>  <span class="s1">&#39;My second Post&#39;</span>
    <span class="ss">body</span><span class="p">:</span>   <span class="s1">&#39;My body&#39;</span>    
  <span class="p">},</span>
  <span class="c1"># Еще какое-то количество данных для постов ...</span>
<span class="o">]</span>

<span class="k">def</span> <span class="nf">rnd_user</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="n">rnd</span><span class="p">)</span>
  <span class="n">random_user_id</span> <span class="o">=</span> <span class="n">rnd</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="p">(</span><span class="n">count</span><span class="p">))</span>
  <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">random_user_id</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">posts</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
  <span class="n">rand_user</span> <span class="o">=</span> <span class="n">rnd_user</span> <span class="n">user_count</span><span class="p">,</span> <span class="n">rnd</span>

  <span class="n">post</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span> <span class="o">=</span> <span class="n">rand_user</span><span class="o">.</span><span class="n">id</span>
  <span class="n">created_post</span> <span class="o">=</span> <span class="n">rand_user</span><span class="o">.</span><span class="n">create_post</span><span class="p">(</span><span class="n">post</span><span class="p">)</span>
<span class="k">end</span></code></pre></div>

<p>Настало время самого интересного и забавного, комментарии. В данном проекте мы использовали гем <a href="https://github.com/elight/acts_as_commentable_with_threading">acts_as_commentable_with_threading</a>. Он содержит 2ух уровневую структуру комментариев, поэтому работы нам немного прибавилось. Чтобы создать комментарий, нам необходимы 3 значения: пост, где будет этот комментарий, пользователь, оставивший комментарий, и непосредственно сам текст комментария. Смотрится все это примерно так:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">post</span><span class="o">.</span><span class="n">build_comment</span><span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="n">body</span><span class="p">)</span></code></pre></div>

<p>Ну а для “подкомментария” нам так же необходимо знать родительский комментарий, от которого ветка и пойдет, т.е. создание подобного комментария будет выглядеть примерно так:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">child_comment</span> <span class="o">=</span> <span class="n">post</span><span class="o">.</span><span class="n">build_comment</span><span class="p">(</span><span class="n">user_id</span><span class="p">,</span> <span class="n">body</span><span class="p">)</span>
<span class="n">child_comment</span><span class="o">.</span><span class="n">move_to_child_of</span><span class="p">(</span><span class="n">comment</span><span class="p">)</span></code></pre></div>

<p>А теперь давайте создадим от 10 до 21 главных комментариев и до 9ти дочерних для каждого главного, при этом каждый комментарий будет оставлять рандомный пользователь:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">posts</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
  <span class="n">rand_user</span> <span class="o">=</span> <span class="n">rnd_user</span> <span class="n">user_count</span><span class="p">,</span> <span class="n">rnd</span>

  <span class="n">post</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span> <span class="o">=</span> <span class="n">rand_user</span><span class="o">.</span><span class="n">id</span>
  <span class="n">created_post</span> <span class="o">=</span> <span class="n">rand_user</span><span class="o">.</span><span class="n">create_post</span><span class="p">(</span><span class="n">post</span><span class="p">)</span>

  <span class="n">rnd</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">10</span><span class="o">.</span><span class="n">.</span><span class="mi">21</span><span class="p">)</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
    <span class="n">rand_user</span> <span class="o">=</span> <span class="n">rnd_user</span> <span class="n">user_count</span><span class="p">,</span> <span class="n">rnd</span>
    <span class="n">comment</span> <span class="o">=</span> <span class="n">created_post</span><span class="o">.</span><span class="n">build_comment</span><span class="p">(</span><span class="n">rand_user</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="s1">&#39;Comment body&#39;</span><span class="p">)</span>
    <span class="n">comment</span><span class="o">.</span><span class="n">save!</span>

    <span class="n">rnd</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
      <span class="n">rand_user</span> <span class="o">=</span> <span class="n">rnd_user</span> <span class="n">user_count</span><span class="p">,</span> <span class="n">rnd</span>
      <span class="n">child_comment</span> <span class="o">=</span> <span class="n">created_post</span><span class="o">.</span><span class="n">build_comment</span><span class="p">(</span><span class="n">rand_user</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="s1">&#39;Comment body&#39;</span><span class="p">)</span>
      <span class="n">child_comment</span><span class="o">.</span><span class="n">save!</span>
      <span class="n">child_comment</span><span class="o">.</span><span class="n">move_to_child_of</span><span class="p">(</span><span class="n">comment</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>

<p>Хм, рандомное количество комментариев мы сделали, пользователей тоже разных назначили, но вот незадача, у нас body каждого комментария одно и тоже, а именно <code>'Comment body'</code>.Что же делать и как нам быть? Раз уж мы договорились создать подобие “живого” приложения, то и комментарии у нас должны быть разные и тоже живые. Первое, что приходит в голову, - опять использовать массив данных, но я слишков ленив (да и не путь самурая это), чтобы все это набирать, пусть даже копипастить и тем более придумывать. Второе, что приходит на ум, генерировать рандомную строчку текста. Да, идея не плохая, как минимум, нам придется писать меньше кода, и он по-любому будет всегда разный. Но есть одно но: мы пытаемся достигнуть абсолютной правдоподобности, а строки вида <code>'skjafnskdjn ksajdnf'</code> нам точно не подойдут как комментарии. Поэтому нам на помощь приходит отличное решение - гем <a href="https://github.com/postmodern/raingrams">raingrams</a>.</p>

<p>Что же такого может этот гем, спросите Вы? На самом деле, ничего особенного, Вы просто скармливаете ему текст, а он, в свою очередь, разбивает его на куски и рандомно выдает обратно. В чем плюсы? Да, они не отличаются от банальной генерации строки, единственное и очевидное отличие - генерируемый текст будет логичен в пределах строки.</p>

<p>В документации достаточно подробно описано, как гем ставится и настраивается, но я бы хотел уделить внимание 2ум подводным камням, с которыми мы столкнулись:</p>

<ul>
  <li>
    <p>Во первых, гем не поддерживает русский язык. Скажем так, он его не видит. Поэтому, если для Вас важен русский язык, используйте наш <a href="https://github.com/dointeractive/raingrams">форк</a>, в котором исправлен этот косяк.</p>
  </li>
  <li>
    <p>Ну а второй момент, в старых версиях существовал метод <code>train_with_url</code>, в который передавалась ссылка, а он уже все парсил и выдавал конечный результат. К сожалению, в свежих версиях этот метод был убран, причем убран очень хитро. Если быть точным, то автор просто вырезал часть этого метода, а вторую забыл(а может, решил стебануться над простыми парнями как мы, этого я, к сожалению, не знаю :) ).</p>
  </li>
</ul>

<p>А теперь, используя полученные знания, перепишем наш метод. В качестве текста для raingrams мы будем использовать комментарии из пикабу, которые предварительно распарсим:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">model</span> <span class="o">=</span> <span class="no">QuadgramModel</span><span class="o">.</span><span class="n">build</span> <span class="k">do</span> <span class="o">|</span><span class="n">model</span><span class="o">|</span>
  <span class="n">doc</span> <span class="o">=</span> <span class="no">Nokogiri</span><span class="o">::</span><span class="no">HTML</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s1">&#39;http://pikabu.ru/story/v_den_programmista_pro_logiku_pikabu_685289&#39;</span><span class="p">))</span>
  <span class="n">doc</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s1">&#39;div.comment_desc&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">div</span><span class="o">|</span>
    <span class="n">model</span><span class="o">.</span><span class="n">train_with_text</span><span class="p">(</span><span class="n">div</span><span class="o">.</span><span class="n">inner_text</span><span class="p">)</span>
    <span class="n">model</span><span class="o">.</span><span class="n">refresh</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># ....</span>

<span class="n">posts</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
  <span class="n">rand_user</span> <span class="o">=</span> <span class="n">rnd_user</span> <span class="n">user_count</span><span class="p">,</span> <span class="n">rnd</span>

  <span class="n">post</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span> <span class="o">=</span> <span class="n">rand_user</span><span class="o">.</span><span class="n">id</span>
  <span class="n">created_post</span> <span class="o">=</span> <span class="n">rand_user</span><span class="o">.</span><span class="n">create_post</span><span class="p">(</span><span class="n">post</span><span class="p">)</span>

  <span class="n">rnd</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">10</span><span class="o">.</span><span class="n">.</span><span class="mi">21</span><span class="p">)</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
    <span class="n">rand_user</span> <span class="o">=</span> <span class="n">rnd_user</span> <span class="n">user_count</span><span class="p">,</span> <span class="n">rnd</span>
    <span class="n">comment</span> <span class="o">=</span> <span class="n">created_post</span><span class="o">.</span><span class="n">build_comment</span><span class="p">(</span><span class="n">rand_user</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">model</span><span class="o">.</span><span class="n">random_sentence</span><span class="p">)</span>
    <span class="n">comment</span><span class="o">.</span><span class="n">save!</span>

    <span class="n">rnd</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
      <span class="n">rand_user</span> <span class="o">=</span> <span class="n">rnd_user</span> <span class="n">user_count</span><span class="p">,</span> <span class="n">rnd</span>
      <span class="n">child_comment</span> <span class="o">=</span> <span class="n">created_post</span><span class="o">.</span><span class="n">build_comment</span><span class="p">(</span><span class="n">rand_user</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">model</span><span class="o">.</span><span class="n">random_sentence</span><span class="p">)</span>
      <span class="n">child_comment</span><span class="o">.</span><span class="n">save!</span>
      <span class="n">child_comment</span><span class="o">.</span><span class="n">move_to_child_of</span><span class="p">(</span><span class="n">comment</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>

<p>Кстати, я уверен, что немного изменив наш скрипт, можно будет создать подобную генератию текстов непосредственно для постов.</p>

<p>Выглядит здорово. Да, может, код не самый чистый, и в целом скрипт слишком часто обращается к базе, но согласитесь, наше творение имитирует реальную активность пользователей. Не идеально, конечно, но все же. Думаю, на этом можно было бы закончить рассказ, но остался последний момент, который хотелось бы осветить и исправить в нашем скрипте.</p>

<p>Как думаете, где еще нам придется создавать пользователей (и не только их), которых мы создали в самом начале? Правильно, в тестах, надо же на чем-то тестировать приложение. Так почему бы нам не убить 2ух зайцев и не заменить ручную генерацию, как это было в начале статьи, на старую добрую фабричную? Так как в нашем проекте мы используем гем  <a href="http://www.fabricationgem.org/">fabrication</a>, то и пример будет с ним. Вы также можете использовать любую другуюю фабрику, которая вам по вкусу.</p>

<p>Для начала определим нашего пользователя и администратора:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">Fabricator</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">email</span> <span class="no">Faker</span><span class="o">::</span><span class="no">Internet</span><span class="o">.</span><span class="n">email</span>
  <span class="nb">name</span> <span class="no">Faker</span><span class="o">::</span><span class="no">Name</span><span class="o">.</span><span class="n">name</span>
  <span class="n">password</span> <span class="s1">&#39;12345678&#39;</span>
  <span class="n">password_confirmation</span> <span class="s1">&#39;12345678&#39;</span>
<span class="k">end</span>

<span class="no">Fabricator</span><span class="p">(</span><span class="ss">:admin</span><span class="p">)</span> <span class="k">do</span>
  <span class="n">email</span> <span class="s1">&#39;admin@my_app.org&#39;</span>
  <span class="nb">name</span> <span class="s1">&#39;admin&#39;</span>
  <span class="n">password</span> <span class="s1">&#39;12345678&#39;</span>
  <span class="n">password_confirmation</span> <span class="s1">&#39;12345678&#39;</span>
<span class="k">end</span></code></pre></div>

<p>Ну а теперь, воспользуемся нашей новосозданной фабрикой для избавления от лишнего кода в seed файле:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">user_count</span> <span class="o">=</span> <span class="n">rnd</span><span class="o">.</span><span class="n">rand</span><span class="p">(</span><span class="mi">18</span><span class="o">.</span><span class="n">.</span><span class="mi">23</span><span class="p">)</span>
<span class="no">Fabricate</span><span class="p">(</span><span class="ss">:admin</span><span class="p">)</span>

<span class="n">user_count</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">}</span></code></pre></div>

<p>В итоге, мы смогли убрать достаточно приличный кусок cкрипта, избавшись от явного повтора кода.</p>

<p>На этом, пожалуй, я закончу наши эксперименты. Как видите, простора для фантазии осталось еще много и также осталось много идей для рефакторинга. В любом случае, данный пример явно показывает, что к любой, сколь скучной она не была бы, задаче всегда можно применить творческий подход и неплохо развлечься :)</p>
]]></content:encoded>
      <dc:date>2014-03-10T00:00:00+04:00</dc:date>
    </item>
    <item>
      <title>IRB и все все все</title>
      <link>http://davydovanton.github.io/posts/irb-and-all-all-all</link>
      <description><![CDATA[Думаю, каждый, кто так или иначе связан с Ruby и тем более с Rails, хоть раз в жизни использовал irb. Возможности интерактивного ruby шела безграничны, поэтому сегодня я бы хотел поговорить об улучшении или кастомизации, если вам так угодно, вашего irb.

]]></description>
      <pubDate>Sun, 09 Feb 2014 00:00:00 +0400</pubDate>
      <guid>http://davydovanton.github.io/posts/irb-and-all-all-all</guid>
      <content:encoded><![CDATA[<p>Думаю, каждый, кто так или иначе связан с Ruby и тем более с Rails, хоть раз в жизни использовал irb. Возможности интерактивного ruby шела безграничны, поэтому сегодня я бы хотел поговорить об улучшении или кастомизации, если вам так угодно, вашего irb.</p>

<!--more-->

<p>Но для начала давайте посмотрим документацию, а именно откроем модуль <a href="http://www.ruby-doc.org/stdlib-2.0/libdoc/irb/rdoc/IRB.html">IRB</a> в стандартной библиотеке ruby.
“Что интересного тут есть?”, спросите вы? Думаю стоит начать с самого начала, с запуска. Если вы просто наберете в консоли <code>irb</code>, то запустите шел с вашей текущей версией руби. Но  если у вас RVM(хотя, сказать по правде я не уверен, что это работает только с RVM), то вы можете выбрать среду для запуска из всех тех, что у вас установлены. Например вот так, я, при активном MRI 2.0, могу запустить у себя jruby:</p>

<p><a class="lightbox" href="http://davydovanton.github.io/images/2014/02/irb-and-all-all-all/jruby-irb.png">
<img src="http://davydovanton.github.io/images/2014/02/irb-and-all-all-all/jruby-irb.png" alt="jruby in irb" />
</a></p>

<p>Дальше, думаю, следует обсудить ключи. Их много, они разные. В документации они все <a href="http://www.ruby-doc.org/stdlib-2.0/libdoc/irb/rdoc/IRB.html#module-IRB-label-Command+line+options">есть</a>. Самые интересные, на мой взляд, - <code>-d</code> включающий дебаг мод(аналогично <code>ruby -d</code>) и ключ <code>-I path</code>, загружающий указанную директорию.</p>

<p>Ну а теперь самое интересное: поговорим о конфигурации вашего irb. Для этого необходимо создать <code>*rc</code> аналогичный <code>.bashrc</code> или <code>.vimrc</code>. Существует несколько разновидностей именования этого файла, например: <code>.irbrc</code>, <code>irb.rc</code>, <code>_irbrc</code> или же <code>$irbrc</code>.</p>

<p>Думаю, для начала, следует указать конфигурационные значения, например, увеличить количество сохраняемых команд и записывать их в отдельный файл:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">IRB</span><span class="o">.</span><span class="n">conf</span><span class="o">[</span><span class="ss">:SAVE_HISTORY</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1000</span>
<span class="no">IRB</span><span class="o">.</span><span class="n">conf</span><span class="o">[</span><span class="ss">:HISTORY_FILE</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;HOME&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/.irb_history&quot;</span></code></pre></div>

<p>Так же можно указать кучу других настроек, но я бы не стал писать эту статью, если бы хотел рассказать только это. Все веселье начинается тогда, когда приходит понимание того, что данный файл является обычным <code>*.rb</code> файлом, который загружается при старте вашего irb.</p>

<p>Думаю, все догадались, что дальше будет? :)</p>

<p>Предлагаю написать, ради развлечения, метод, который возвращал бы все локальные методы объекта. Выглядеть он будет примерно так:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># .irbrc</span>
<span class="k">class</span> <span class="nc">Object</span>
  <span class="k">def</span> <span class="nf">local_methods</span>
    <span class="p">(</span><span class="nb">methods</span> <span class="o">-</span> <span class="no">Object</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">)</span><span class="o">.</span><span class="n">sort</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>

<p>Как он будет работать, спросите вы? Да все просто, берете объект и вызываете на нем данный метод:</p>

<p><a class="lightbox" href="http://davydovanton.github.io/images/2014/02/irb-and-all-all-all/irb_local_methods.png">
<img src="http://davydovanton.github.io/images/2014/02/irb-and-all-all-all/irb_local_methods.png" alt="Using local_mathods method in irb" />
</a></p>

<p>Думаю, вы заметили цвета, которых не хватает в дефолтном irb?</p>

<p>Да, все верно, так же можно подключать гемы, и да, есть гемы, которые добавляют ярких цветов в ваш irb, например, <a href="https://github.com/blackwinter/wirble">wirble</a>. Достаточно написать такой код:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;wirble&#39;</span>

<span class="no">Wirble</span><span class="o">.</span><span class="n">init</span>
<span class="no">Wirble</span><span class="o">.</span><span class="n">colorize</span></code></pre></div>

<p>И ваш интерактивный шел заиграет новыми красками :)</p>

<p>А если вам нравится <a href="http://pryrepl.org/">pry</a>, то вам никто не запрещает его добавить, в последующем вызывая его, просто набрав <code>pry</code> во время irb сессии:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1">#.irbrc</span>
<span class="nb">require</span> <span class="s1">&#39;pry&#39;</span>

<span class="c1"># irb</span>
<span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">p247</span> <span class="p">:</span><span class="mo">015</span> <span class="o">&gt;</span> <span class="n">pry</span>
<span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span></code></pre></div>

<p>Ну а выглядеть это будет как-то так:
<a class="lightbox" href="http://davydovanton.github.io/images/2014/02/irb-and-all-all-all/pry.gif">
<img src="http://davydovanton.github.io/images/2014/02/irb-and-all-all-all/pry.gif" alt="Using pry in irb" />
</a></p>

<p>Но самое полезное, что можно сделать, это забыть построчный ввод кода. “Как?”, спросите вы? Начну издалека: мне очень нравится vim :) Поэтому, смотря vimcasts-ы, я узнал то, что перевернуло мой мир, а именно: любой текстовый редактор можно <a href="http://vimcasts.org/episodes/running-vim-within-irb/">вызывать</a> прямо из irb.</p>

<p>Делается это очень просто: нужно добавить гем <code>interactive_editor</code>. Данный гем позволяет вызывать любой текстовый редактор из вашего irb, например, набрав <code>vim</code> - откроется vim, где вы сможете набрать любой код, который выполнится после сохранения файла и закрытия редактора.</p>

<p><a class="lightbox" href="http://davydovanton.github.io/images/2014/02/irb-and-all-all-all/vim-in-irb.gif">
<img src="http://davydovanton.github.io/images/2014/02/irb-and-all-all-all/vim-in-irb.gif" alt="Using vim in irb" />
</a></p>

<p>Собственно то же самое будет работать с sublime, textmate, emacs и <a href="https://github.com/jberkel/interactive_editor/blob/master/lib/interactive_editor.rb#L92">дургими</a> текстовыми редакторами.</p>

<p>Ну и на последок стоит рассказать про сессии в irb. Если вы используете vim или когда то использовали его, то вам знакомо такое понятие как буфер, которое чем-то похоже на сессии в irb. Ну а если нет, то краткая справка: сессия - некий сеанс интерактивного шела. Для того, что бы посмотреть список всех сессий в irb, достаточно набрать <code>jobs</code>:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">p247</span> <span class="p">:</span><span class="mo">012</span> <span class="o">&gt;</span> <span class="n">jobs</span>
 <span class="o">=&gt;</span> <span class="c1">#0-&gt;irb on main (#&lt;Thread:0x007fcb810bcda0&gt;: running)</span></code></pre></div>

<p>Ну а если вам надо создать новую сессию, то просто наберите <code>irb</code>:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">p247</span> <span class="p">:</span><span class="mo">013</span> <span class="o">&gt;</span> <span class="n">irb</span>
<span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">p247</span> <span class="p">:</span><span class="mo">001</span> <span class="o">&gt;</span> <span class="n">jobs</span>
 <span class="o">=&gt;</span> <span class="c1">#0-&gt;irb on main (#&lt;Thread:0x007fcb810bcda0&gt;: stop)</span>
<span class="c1">#1-&gt;irb#1 on main (#&lt;Thread:0x007fcb819b7bf8&gt;: running)</span></code></pre></div>

<p>Как видите, irb создал новую сессию и переключился в нее. Но что делать, когда вы хотите удалить или изменить сессию? Для этого есть методы <code>kill &lt;number_session&gt;</code> и <code>fg &lt;number_session&gt;</code> соответственно:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">p247</span> <span class="p">:</span><span class="mo">002</span> <span class="o">&gt;</span> <span class="n">jobs</span>
 <span class="o">=&gt;</span> <span class="c1">#0-&gt;irb on main (#&lt;Thread:0x007fcb810bcda0&gt;: stop)</span>
<span class="c1">#1-&gt;irb#1 on main (#&lt;Thread:0x007fcb819b7bf8&gt;: stop)</span>
<span class="c1">#2-&gt;irb#2 on main (#&lt;Thread:0x007fcb81319238&gt;: running) </span>
<span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">p247</span> <span class="p">:</span><span class="mo">003</span> <span class="o">&gt;</span> <span class="n">fg</span> <span class="mi">1</span>
 <span class="o">=&gt;</span> <span class="c1">#&lt;IRB::Irb: @context=#&lt;IRB::Context:0x007fcb819b7a40&gt;, @signal_status=:IN_EVAL, @scanner=#&lt;RubyLex:0x007fcb819b74c8&gt;&gt; </span>
<span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">p247</span> <span class="p">:</span><span class="mo">00</span><span class="mi">9</span> <span class="o">&gt;</span> <span class="n">jobs</span>
 <span class="o">=&gt;</span> <span class="c1">#0-&gt;irb on main (#&lt;Thread:0x007fcb810bcda0&gt;: stop)</span>
<span class="c1">#1-&gt;irb#1 on main (#&lt;Thread:0x007fcb819b7bf8&gt;: running)</span>
<span class="c1">#2-&gt;irb#2 on main (#&lt;Thread:0x007fcb81319238&gt;: stop) </span>
<span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">p247</span> <span class="p">:</span><span class="mo">010</span> <span class="o">&gt;</span> <span class="n">kill</span> <span class="mi">2</span>
 <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">2</span><span class="o">]</span> 
<span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">p247</span> <span class="p">:</span><span class="mo">011</span> <span class="o">&gt;</span> <span class="n">jobs</span>
 <span class="o">=&gt;</span> <span class="c1">#0-&gt;irb on main (#&lt;Thread:0x007fcb810bcda0&gt;: stop)</span>
<span class="c1">#1-&gt;irb#1 on main (#&lt;Thread:0x007fcb819b7bf8&gt;: running) </span>
<span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">p247</span> <span class="p">:</span><span class="mo">012</span> <span class="o">&gt;</span> <span class="n">kill</span> <span class="mi">1</span>
 <span class="o">=&gt;</span> <span class="c1">#&lt;IRB::Irb: @context=#&lt;IRB::Context:0x007fcb8185b2c8&gt;, @signal_status=:IN_EVAL, @scanner=#&lt;RubyLex:0x007fcb8110d5e8&gt;&gt; </span>
<span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">p247</span> <span class="p">:</span><span class="mo">014</span> <span class="o">&gt;</span> <span class="n">jobs</span>
 <span class="o">=&gt;</span> <span class="c1">#0-&gt;irb on main (#&lt;Thread:0x007fcb810bcda0&gt;: running)</span></code></pre></div>

]]></content:encoded>
      <dc:date>2014-02-09T00:00:00+04:00</dc:date>
    </item>
    <item>
      <title>Ruby и special/predefined variables</title>
      <link>http://davydovanton.github.io/posts/ruby-and-predefined-global-variables</link>
      <description><![CDATA[Не так давно я обнаружил интересный пример в одной замечательной книге. С этого примера, я бы и хотел начать наш разговор.

]]></description>
      <pubDate>Wed, 15 Jan 2014 00:00:00 +0400</pubDate>
      <guid>http://davydovanton.github.io/posts/ruby-and-predefined-global-variables</guid>
      <content:encoded><![CDATA[<p>Не так давно я обнаружил интересный пример в одной замечательной книге. С этого примера, я бы и хотел начать наш разговор.</p>

<!--more-->

<p>Выглядел примерно так:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="s2">&quot;test string in irb&quot;</span><span class="o">.</span><span class="n">match</span> <span class="sr">/irb/</span>
<span class="nb">puts</span> <span class="vg">$&amp;</span>
<span class="c1">#=&gt; &quot;irb&quot;</span></code></pre></div>

<p>Так как до этого я не часто встречался с подобными “глобальными” переменными, пример заинтересовал меня и захотелось выяснить, что же это за переменные.
Первым делом, я решил узнать, как они называются и где их можно найти. Спустя несколько минут, стало ясно, что это так называемые “special variables”. Не долго думая и открыв google, просмотрев пару тройку результатов, стало ясно, что кроме списка этих переменных ничего особо нет. Это не сильно меня обрадовало и стало понятно, что пришло время открыть репозитарий ruby и начать искать в нем. Так же мне очень помогла одна небезизвестная <a href="http://patshaughnessy.net/ruby-under-a-microscope">книга</a>.
Как оказалось, ruby создает несколько специальных переменных, в зависимости от откружения, в котором запускаются программы, или в зависимости от действий, которые были выполены ранее. Кстати, это не совсем глобальные перменные, в чем легко можно убедиться, рассмотрев простой пример:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">test</span>
  <span class="s2">&quot;test string in irb&quot;</span><span class="o">.</span><span class="n">match</span> <span class="sr">/test/</span>
  <span class="nb">puts</span> <span class="s2">&quot;$&amp; in test method </span><span class="si">#{</span><span class="vg">$&amp;</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="k">end</span>

<span class="s2">&quot;test string in irb&quot;</span><span class="o">.</span><span class="n">match</span> <span class="sr">/irb/</span>
<span class="nb">puts</span> <span class="s2">&quot;$&amp; in main </span><span class="si">#{</span><span class="vg">$&amp;</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="c1">#=&gt; &quot;irb&quot;</span>

<span class="nb">test</span>
<span class="c1">#=&gt; &quot;test&quot;</span></code></pre></div>

<p>Как видно из примера, в каждом scope (main и метода), “глобальная” переменная отличается. Любой адекватный человек спросит: как такое, тысяча чертей, возможно? На самом деле все довольно просто, но, для полного понимания, начать придется с основ. Как многие знают, начиная с верисии 1.9 в ruby была добавлена виртуальная машина или YARV или же <a href="http://atdot.net/yarv/">yet another ruby virtual machine</a>, называйте как хотите, суть одна и та же. Смысл в том, что каждый раз, при запуске, YARV так же создает особый стек, для локальных переменных. В этом стеке указываются абсолютно все локальные переменные, свои для каждого scope. Разделение scope-ов происходит с помощью специальной точки или указателя - environment point (далее EP). Так же, в стеке, перед каждой EP, создается специальная переменная svar, которая как раз и указывает на таблицу специальных символов. Именно из-за этого для каждого scope могут быть свои значения специальных символов, что мы видели в примере выше.
Но самое интересное, что у обычного блока и у места, где он будет вызван, scope одинаковый, в чем можно легко убедиться благодаря такому примеру:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="s2">&quot;test string in irb&quot;</span><span class="o">.</span><span class="n">match</span> <span class="sr">/irb/</span>

<span class="mi">1</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
  <span class="s2">&quot;test string in irb&quot;</span><span class="o">.</span><span class="n">match</span> <span class="sr">/test/</span>
  <span class="nb">puts</span> <span class="s2">&quot;$&amp; in block </span><span class="si">#{</span><span class="vg">$&amp;</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="k">end</span>

<span class="nb">puts</span> <span class="s2">&quot;$&amp; in main </span><span class="si">#{</span><span class="vg">$&amp;</span><span class="si">}</span><span class="s2">&quot;</span>

<span class="o">&gt;</span> <span class="n">ruby</span> <span class="nb">test</span><span class="o">.</span><span class="n">rb</span>
<span class="o">&gt;&gt;</span> <span class="s2">&quot;$&amp; in block test&quot;</span>
<span class="o">&gt;&gt;</span> <span class="s2">&quot;$&amp; in block test&quot;</span>
<span class="o">&gt;&gt;</span> <span class="s2">&quot;$&amp; in main test&quot;</span></code></pre></div>

<p>На самом деле это логичное поведение, ибо замыкания никто не отменял.
Как я уже говорил, таких переменных <a href="http://readruby.io/globals">много</a>, но расскажу я о самых интересных(естественно для себя):</p>

<hr />

<h5 id="section">$&amp;</h5>
<p>Переменная, с которой начался наш рассказ. Хранит, как вы уже догадались, результат последнего совпадения регулярного выражения.</p>

<h5 id="section-1">$1 $2 $3 …</h5>
<p>Думаю, многим знакомая похожая переменная из регулярных выражений. Хотя, кого я обманываю? Это та же самая перменная, которая хранит совпадения из скобок:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="s2">&quot;test string in irb&quot;</span><span class="o">.</span><span class="n">match</span> <span class="sr">/(irb)/</span>
<span class="nb">puts</span> <span class="vg">$1</span>
<span class="c1">#=&gt; &quot;irb&quot;</span></code></pre></div>

<h5 id="section-2">$~</h5>
<p>Содержит объект класса MatchData, соответствующий последнему совпадению.</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="s2">&quot;test string in irb&quot;</span><span class="o">.</span><span class="n">match</span> <span class="sr">/(irb)/</span>
<span class="nb">puts</span> <span class="vg">$~</span>
<span class="c1">#=&gt; #&lt;MatchData &quot;irb&quot; 1:&quot;irb&quot;&gt;</span>
<span class="nb">puts</span> <span class="vg">$~</span><span class="o">.</span><span class="n">to_s</span>
<span class="c1">#=&gt; &quot;irb&quot;</span>
<span class="nb">puts</span> <span class="vg">$~</span><span class="o">.</span><span class="n">to_a</span>
<span class="c1">#=&gt; [&quot;irb&quot;, &#39;irb&#39;]</span></code></pre></div>

<h5 id="section-3">$+</h5>
<p>Содержит значение последней круглой скобки из последнего совпадения:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="s2">&quot;test string in irb&quot;</span><span class="o">.</span><span class="n">match</span> <span class="sr">/irb/</span>
<span class="nb">puts</span> <span class="vg">$~</span>
<span class="c1">#=&gt; #&lt;MatchData &quot;irb&quot; 1:&quot;irb&quot;&gt;</span>
<span class="nb">puts</span> <span class="vg">$+</span>
<span class="c1">#=&gt; nil</span>
<span class="s2">&quot;test in irb&quot;</span><span class="o">.</span><span class="n">match</span> <span class="sr">/(test) (in) (irb)/</span>
<span class="nb">puts</span> <span class="vg">$~</span>
<span class="c1">#=&gt; #&lt;MatchData &quot;test in irb&quot; 1:&quot;test&quot; 2:&quot;in&quot; 3:&quot;irb&quot;&gt;</span>
<span class="nb">puts</span> <span class="vg">$+</span>
<span class="c1">#=&gt; &quot;irb&quot;</span></code></pre></div>

<h5 id="section-4">$`</h5>
<p>Содержит все то, что не совпало в последнем регулярном выражении:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="s2">&quot;test string in irb&quot;</span><span class="o">.</span><span class="n">match</span> <span class="sr">/irb/</span>
<span class="nb">puts</span> <span class="vg">$`</span>
<span class="c1">#=&gt; &quot;test string in&quot;</span></code></pre></div>

<h5 id="section-5">$!</h5>
<p>Содержит последнее вызванное исключение:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="mi">1</span> <span class="o">/</span> <span class="mi">0</span> <span class="k">rescue</span> <span class="vg">$!</span>
<span class="c1">#=&gt; #&lt;ZeroDivisionError: divided by 0&gt;</span></code></pre></div>

<h5 id="section-6">$@</h5>
<p>Ну а эта переменная содержит массив со всеми trace stack-ами из последнего исключения:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="mi">1</span> <span class="o">/</span> <span class="mi">0</span> <span class="k">rescue</span> <span class="vg">$@</span>
<span class="c1">#=&gt; [&quot;&lt;main&gt;:4:in `/&#39;&quot;, &quot;&lt;main&gt;:4:in `/&#39;&quot;, &quot;(irb):98:in `irb_binding&#39;&quot;, ... ]</span></code></pre></div>

<h5 id="section-7">$*</h5>
<p>Эта переменная равносильна переменной ARGV, думаю этим все сказанно.</p>

<h5 id="section-8">$$</h5>
<p>Переменная возвращает номер процесса, под которым выполняется скрипт.</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="vg">$$</span>
<span class="c1">#=&gt; 33630</span>
<span class="nb">puts</span> <span class="sb">`ps aux | grep irb`</span>
<span class="c1">#=&gt; anton           33630   0.0  0.3  2470520  24084 s008  S+    2Jan14   0:01.24 irb</span></code></pre></div>

<p>.</p>

<hr />

<p>Так где же определены эти переменные в исходном коде ruby? Как оказалось, все не так сложно, как кажется. Определенны эти переменные в файле <a href="https://github.com/ruby/ruby/blob/v2_1_0/parse.y#L7950">parse.y</a> примерно на 7950-той строке (да да, файл не очень большой, всего 11.5к строк кода). Для тех, кто не в курсе, parse.y - грамматический файл интерпритатора, благодаря которому происходит разбиение написанного вами кода на токены (лексемы/указатели), которые в последующем преобразуются в AST структуру, а затем в YARV структуру, ну а дальше в машинный код, который в последующем и будет выполняется.
Как не трудно заметить, case функция ищет совпадение символа “$” и специальных символов (блок case), после чего передает их функции set_yylval_name:</p>

<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="mi">7965</span><span class="o">:</span> <span class="k">case</span> <span class="sc">&#39;~&#39;</span><span class="o">:</span>                <span class="cm">/* $~: match-data */</span>
<span class="mi">7966</span><span class="o">:</span> <span class="k">case</span> <span class="sc">&#39;*&#39;</span><span class="o">:</span>                <span class="cm">/* $*: argv */</span>
<span class="mi">7967</span><span class="o">:</span> <span class="k">case</span> <span class="sc">&#39;$&#39;</span><span class="o">:</span>                <span class="cm">/* $$: pid */</span>
<span class="mi">7968</span><span class="o">:</span> <span class="k">case</span> <span class="sc">&#39;?&#39;</span><span class="o">:</span>                <span class="cm">/* $?: last status */</span>
<span class="mi">7969</span><span class="o">:</span> <span class="k">case</span> <span class="sc">&#39;!&#39;</span><span class="o">:</span>                <span class="cm">/* $!: error string */</span>
<span class="mi">7970</span><span class="o">:</span> <span class="k">case</span> <span class="sc">&#39;@&#39;</span><span class="o">:</span>                <span class="cm">/* $@: error position */</span>
<span class="mi">7971</span><span class="o">:</span> <span class="k">case</span> <span class="sc">&#39;/&#39;</span><span class="o">:</span>                <span class="cm">/* $/: input record separator */</span>
<span class="mi">7972</span><span class="o">:</span> <span class="k">case</span> <span class="sc">&#39;\\&#39;</span><span class="o">:</span>               <span class="cm">/* $\: output record separator */</span>
<span class="mi">7973</span><span class="o">:</span> <span class="k">case</span> <span class="sc">&#39;;&#39;</span><span class="o">:</span>                <span class="cm">/* $;: field separator */</span>
<span class="mi">7974</span><span class="o">:</span> <span class="k">case</span> <span class="sc">&#39;,&#39;</span><span class="o">:</span>                <span class="cm">/* $,: output field separator */</span>
<span class="mi">7975</span><span class="o">:</span> <span class="k">case</span> <span class="sc">&#39;.&#39;</span><span class="o">:</span>                <span class="cm">/* $.: last read line number */</span>
<span class="mi">7976</span><span class="o">:</span> <span class="k">case</span> <span class="sc">&#39;=&#39;</span><span class="o">:</span>                <span class="cm">/* $=: ignorecase */</span>
<span class="mi">7977</span><span class="o">:</span> <span class="k">case</span> <span class="sc">&#39;:&#39;</span><span class="o">:</span>                <span class="cm">/* $:: load path */</span>
<span class="mi">7978</span><span class="o">:</span> <span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span><span class="o">:</span>                <span class="cm">/* $&lt;: reading filename */</span>
<span class="mi">7979</span><span class="o">:</span> <span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span><span class="o">:</span>                <span class="cm">/* $&gt;: default output handle */</span>
<span class="mi">7980</span><span class="o">:</span> <span class="k">case</span> <span class="sc">&#39;\&quot;&#39;</span><span class="o">:</span>                <span class="cm">/* $&quot;: already loaded files */</span>
<span class="mi">7981</span><span class="o">:</span>   <span class="n">tokadd</span><span class="p">(</span><span class="sc">&#39;$&#39;</span><span class="p">);</span>
<span class="mi">7982</span><span class="o">:</span>   <span class="n">tokadd</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
<span class="mi">7983</span><span class="o">:</span>   <span class="k">goto</span> <span class="n">gvar</span><span class="p">;</span>

<span class="o">-------</span>

<span class="mi">7997</span><span class="o">:</span> <span class="nl">gvar</span><span class="p">:</span>
<span class="mi">7998</span><span class="o">:</span> <span class="n">set_yylval_name</span><span class="p">(</span><span class="n">rb_intern3</span><span class="p">(</span><span class="n">tok</span><span class="p">(),</span> <span class="n">tokidx</span><span class="p">,</span> <span class="n">current_enc</span><span class="p">));</span>
<span class="mi">7999</span><span class="o">:</span> <span class="k">return</span> <span class="n">tGVAR</span></code></pre></div>

<p>И в завершение, следует упомянуть особый файл - <a href="https://github.com/ruby/ruby/blob/v2_1_0/lib/English.rb">English.rb</a>, в котором прописаны алиасы для специальных переменных, благодаря чему можно использовать данные переменные намного понятнее, нежели чем использование $$, $&amp; и так далее:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="s2">&quot;waterbuffalo&quot;</span> <span class="o">=~</span> <span class="sr">/buff/</span>
<span class="nb">print</span> <span class="vg">$&quot;</span><span class="p">,</span> <span class="vg">$&#39;</span><span class="p">,</span> <span class="vg">$$</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>

<span class="c1"># With English:</span>

<span class="nb">require</span> <span class="s2">&quot;English&quot;</span>

<span class="s2">&quot;waterbuffalo&quot;</span> <span class="o">=~</span> <span class="sr">/buff/</span>
<span class="nb">print</span> <span class="vg">$LOADED_FEATURES</span><span class="p">,</span> <span class="vg">$POSTMATCH</span><span class="p">,</span> <span class="vg">$PID</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span></code></pre></div>

]]></content:encoded>
      <dc:date>2014-01-15T00:00:00+04:00</dc:date>
    </item>
    <dc:date>2015-03-30T00:00:00+03:00</dc:date>
  </channel>
</rss>